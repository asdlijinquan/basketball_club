<?php
/**
 * Created by PhpStorm.
 * User: Viter
 * Date: 2018/3/4
 * Time: 15:28
 */
namespace app\user\controller;
use think\Cache;
use base\Base;
use ku\Verify;
use think\Db;
class Regist extends Base{

    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->view->engine->layout(false);//不使用模板
    }

    public function index(){
        $this->assign('title','注册');
        return $this->fetch();
    }

    //注册执行
    public function i(){
        $request = $this->request;
        $email = $request->param('email','','string');
        $password = $request->param('password','','string');
        $secondPassword = $request->param('secondPassword','','string');
        $code = $request->param('emailCode','','string');
        if(!Verify::isEmail($email)){
            return $this->returnJson('邮箱格式不正确');
        }
        $virefyCode = Cache::get('regist_'.$email);
        if($virefyCode === null){
            return  $this->returnJson('未发送邮箱验证码');
        }
        if(strcasecmp($code,$virefyCode)!==0){
            return $this->returnJson('邮箱验证码不正确');
        }
        if(strlen($password)<6){
            return $this->returnJson('密码长度不小于6位数');
        }
        if(strcmp($password,$secondPassword)!==0){
            return $this->returnJson('两次密码不一致');
        }
        $userModel = Db::name('user');
        $existVirefy = $userModel->where(array('email'=>$email))->find();
        if(!empty($existVirefy)){
            return $this->returnJson('邮箱已注册');
        }
        $encryption = sha1($password.substr($email,0,4));
        $data = array('email'=>$email,'password'=>$encryption);
        $res = $userModel->insert($data);
        if(!$res){
            return $this->returnJson('注册失败');
        }
        return $this->returnJson('注册成功',true,1);
    }

}